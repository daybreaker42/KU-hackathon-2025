물론이죠! 아래는 연리지 API 문서를 기반으로 정리한 **Markdown 형식의 API Endpoint 문서**입니다. 각 섹션은 기능별로 나누었고, 요청 방식과 경로를 명확히 표기했습니다.

---

# 🌿 Yeonriji API Documentation

## 🔐 Authentication
```http
POST /auth/signup         # 회원가입
POST /auth/login          # 로그인
req body:
{
  "email": "user@example.com",
  "password": "password123"
} 
response example:
{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJzdWIiOjEsImlhdCI6MTc1NjQwNTU3MywiZXhwIjoxNzU2NDkxOTczfQ.0jgOpk1wKKwJ1v5BrVE1DamTXzjxmxHnj6lgpUb9rS8",
  "user": {
    "id": 1,
    "name": "김민준",
    "email": "user@example.com"
  }
}
```

## 🏠 Home
```http
GET /home/my-plants       # 내 식물 리스트 가져오기
res:
[
  {
    "id": 1,
    "name": "몬스테라",
    "variety": "몬스테라 델리시오사",
    "img_url": "https://example.com/plant1.jpg",
    "status": "good",
    "daysUntilWatering": 3,
    "lastWatered": "2025-08-25T10:00:00Z",
    "wateringCycle": "7days",
    "sunlightNeeds": "간접광선",
    "recentEmotion": "행복"
  }
]
GET /home/today-tasks     # 오늘 할 일 가져오기
GET /home/weekly-diaries  # 주간 일기 작성 현황
GET /home/diaries/{date}  # 특정 날짜 일기 내용 가져오기
GET /home/friend-feeds    # 친구 반응 가져오기
```

## 🌱 Plants
```http
POST /plants/image        # 식물 이미지 업로드
req body: formdata, key: file
res ex:
{
  "imageUrl": "https://s3.amazonaws.com/bucket/plants/uuid-filename.jpg"
}
POST /plants              # 식물 등록
req body:
{
  "name": "몬스테라",
  "variety": "몬스테라 델리시오사",
  "img_url": "https://example.com/plant1.jpg",
  "cycle_type": "WEEKLY",
  "cycle_value": "7",
  "cycle_unit": "일",
  "sunlight_needs": "간접광선",
  "purchase_date": "2025-08-20T00:00:00Z",
  "purchase_location": "화원",
  "memo": "첫 번째 식물"
}
res ex:
{
  "id": 1,
  "name": "몬스테라",
  "variety": "몬스테라 델리시오사",
  "img_url": "https://example.com/plant1.jpg",
  "cycle_type": "WEEKLY",
  "cycle_value": "7",
  "cycle_unit": "일",
  "sunlight_needs": "간접광선",
  "purchase_date": "2025-08-20T00:00:00Z",
  "purchase_location": "화원",
  "memo": "첫 번째 식물",
  "author": {},
  "createdAt": "2025-08-28T10:00:00Z",
  "updatedAt": "2025-08-28T10:00:00Z"
}
GET /plants               # 내 식물 목록 조회
GET /plants/{id}          # 특정 식물 조회
res ex:
{
  "id": 2,
  "name": "세베",
  "variety": "산세베리아",
  "img_url": "https://i.ytimg.com/vi/LOPw_hgNtP4/mqdefault.jpg",
  "cycle_type": "BIWEEKLY",
  "cycle_value": "14",
  "cycle_unit": "days",
  "sunlight_needs": "직사광선",
  "purchase_date": "2024-02-20T00:00:00.000Z",
  "purchase_location": "꽃집",
  "memo": "공기정화 식물",
  "author": {
    "id": 1,
    "name": "김민준"
  },
  "createdAt": "2025-08-28T14:10:06.250Z",
  "updatedAt": "2025-08-28T16:03:57.854Z"
}
PATCH /plants/{id}        # 식물 정보 수정
DELETE /plants/{id}       # 식물 삭제

res ex:
Code	Description	Links
200	
식물 삭제 성공

No links
403	
삭제 권한 없음

No links
404	
식물을 찾을 수 없음

```

## 🧑‍🤝‍🧑 Community
```http
POST /community/image                     # 커뮤니티 이미지 업로드

GET /community                            # 게시글 목록 조회
GET /community/{id}                       # 특정 게시글 조회
POST /community/posts                     # 게시글 작성
PATCH /community/posts/{id}              # 게시글 수정
DELETE /community/posts/{id}             # 게시글 삭제
POST /community/posts/{id}/like          # 게시글 좋아요/취소
필요 인자: path variable id only
response:
{
  "isLiked": true,
  "likesCount": 15
}
GET /community/posts/{id}/comments       # 게시글 댓글 목록 조회
query params:
id *
number
(path)
게시글 ID

page
number
(query)
페이지 번호

limit
number
(query)
페이지당 항목 수

response example:
{
  "comments": [
    {
      "id": 1,
      "content": "몬스테라 정말 예쁘게 키우시네요!",
      "author": {
        "id": 1,
        "name": "김민준"
      },
      "createdAt": "2025-08-28T14:10:06.320Z",
      "updatedAt": "2025-08-28T14:10:06.320Z",
      "parent_id": null,
      "replies": []
    },
    {
      "id": 2,
      "content": "저도 몬스테라 키우고 싶어졌어요",
      "author": {
        "id": 1,
        "name": "김민준"
      },
      "createdAt": "2025-08-28T14:10:06.320Z",
      "updatedAt": "2025-08-28T14:10:06.320Z",
      "parent_id": null,
      "replies": []
    }
  ],
  "total": 2,
  "page": 1,
  "limit": 10,
  "totalPages": 1
}

POST /community/posts/{id}/comments      # 댓글 작성
request body:
{
  "content": "정말 유용한 정보네요! 감사합니다.",
  "parent_id": 1
}
response example:
{
  "id": 1,
  "content": "정말 유용한 정보네요!",
  "author": {},
  "createdAt": "2025-08-28T10:00:00Z",
  "updatedAt": "2025-08-28T10:00:00Z",
  "parent_id": null,
  "replies": [
    "string"
  ]
}
PATCH /community/comments/{id}           # 댓글 수정
request body:
{
  "content": "수정된 댓글 내용입니다."
}
response example:
{
  "id": 1,
  "content": "정말 유용한 정보네요!",
  "author": {},
  "createdAt": "2025-08-28T10:00:00Z",
  "updatedAt": "2025-08-28T10:00:00Z",
  "parent_id": null,
  "replies": [
    "string"
  ]
}

DELETE /community/comments/{id}          # 댓글 삭제
Code	Description	Links
200	
댓글 삭제 성공

No links
403	
삭제 권한 없음

No links
404	
댓글을 찾을 수 없음


```

## 📔 Diary
```http
POST /diary                               # 일기 작성
GET /diary/{date}                         # 특정 날짜 일기 조회
PATCH /diary/{id}                         # 일기 수정
DELETE /diary/{id}                        # 일기 삭제
POST /diary/{id}/comments                 # 일기 댓글 작성
PATCH /diary/comments/{id}               # 일기 댓글 수정
DELETE /diary/comments/{id}              # 일기 댓글 삭제
```

## 🧑‍🤝‍🧑 Friends
```http
GET /friends/search                       # 사용자 검색
POST /friends/request                     # 친구 요청 보내기
GET /friends/requests                     # 친구 요청 목록 조회
POST /friends/requests/{requestId}/accept # 친구 요청 수락
DELETE /friends/requests/{requestId}/reject # 친구 요청 거절
DELETE /friends/requests/{requestId}/cancel # 친구 요청 취소
GET /friends                              # 친구 목록 조회
DELETE /friends/{friendId}                # 친구 삭제
GET /friends/activities                   # 친구들의 최근 활동 조회
```

## 👤 Users
```http
GET /users/{id}                           # 사용자 프로필 조회
GET /users/me/activities                  # 내 활동 조회
PATCH /users/me/name                      # 이름 변경
PATCH /users/me/profile-image             # 프로필 사진 변경
DELETE /users/me/account                  # 회원탈퇴
```

## 🖼️ Image
```http
POST /image/upload/single                 # 단일 이미지 업로드
POST /image/upload/multiple               # 다중 이미지 업로드 (최대 10개)
DELETE /image/delete                      # 이미지 삭제
```

---

필요하다면 각 API의 요청/응답 예시나 파라미터 설명도 추가해드릴 수 있어요. 어떤 방식으로 확장하고 싶으신가요?