// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  password    String
  email       String       @unique
  profile_img String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  diary       Diary[]
  emotion     Emotion[]
  plant       Plant[]
  comment     Comment[]
  post        Post[]
  likes       Likes[]
  friendships Friendship[] @relation("UserFriendships")
  friendOf    Friendship[] @relation("FriendOf")
  memories    Memory[]
}

model Diary {
  id        Int        @id @default(autoincrement())
  user_id   Int
  title     String
  content   String
  emotion   String?
  memory    String?
  sun       Boolean    @default(false)
  water     Boolean    @default(false)
  plant_id  Int?
  date      String     @default("2022-08-29")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [user_id], references: [id])
  plant     Plant?     @relation(fields: [plant_id], references: [id])
  diary_img DiaryImg[]
  comment   Comment[]
}

model Emotion {
  id         Int      @id @default(autoincrement())
  user_id    Int
  type       String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model Plant {
  id                Int       @id @default(autoincrement())
  user_id           Int
  variety           String
  name              String
  cycle_type        CycleType
  cycle_value       String // 요일 혹은 일
  cycle_unit        String? // 오전, 오후
  sunlight_needs    String?
  purchase_date     DateTime?
  purchase_location String?
  memo              String?
  img_url           String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [user_id], references: [id])
  task_log          TaskLog[]
  diary             Diary[]
}

model TaskLog {
  id              Int      @id @default(autoincrement())
  plant_id        Int
  completion_date DateTime
  type            String
  createdAt       DateTime @default(now())
  plant           Plant    @relation(fields: [plant_id], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  post_id   Int?
  diary_id  Int?
  user_id   Int
  content   String
  parent_id Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  post      Post?     @relation(fields: [post_id], references: [id])
  diary     Diary?    @relation(fields: [diary_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model Post {
  id         Int       @id @default(autoincrement())
  user_id    Int
  title      String
  content    String
  category   String?
  plant_name String?
  likes      Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id])
  comment    Comment[]
  like       Likes[]
  post_img   PostImg[]
}

model Likes {
  id      Int  @id @default(autoincrement())
  user_id Int
  post_id Int
  post    Post @relation(fields: [post_id], references: [id])
  user    User @relation(fields: [user_id], references: [id])

  @@unique([user_id, post_id])
}

model PostImg {
  id      Int    @id @default(autoincrement())
  post_id Int
  img_url String @db.Text
  post    Post   @relation(fields: [post_id], references: [id])
}

model DiaryImg {
  id       Int    @id @default(autoincrement())
  diary_id Int
  img_url  String
  diary    Diary  @relation(fields: [diary_id], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user_id   Int
  friend_id Int
  status    String   @default("pending") // pending, accepted, declined
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserFriendships", fields: [user_id], references: [id])
  friend    User     @relation("FriendOf", fields: [friend_id], references: [id])

  @@unique([user_id, friend_id])
}

model Memory {
  id        Int      @id @default(autoincrement())
  user_id   Int
  diary_id  Int
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
}

enum CycleType {
  WEEKLY
  BIWEEKLY
  TRIWEEKLY
  MONTHLY
}
